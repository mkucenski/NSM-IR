rule	"normalize_netflow"
when
	has_field("nf_flow_packet_id")
then
	rename_field("nf_in_bytes", "dst_bytes");
	rename_field("nf_in_pkts", "dst_packets");
	rename_field("nf_flows", "flows");
	rename_field("nf_protocol", "network_protocol");
	rename_field("nf_src_tos", "src_tos");
	rename_field("nf_tcp_flags", "tcp_flags");
	rename_field("nf_l4_src_port", "src_port");
	rename_field("nf_ipv4_src_addr", "src_ip_addr");
	rename_field("nf_src_mask", "src_ip_netmask");
	rename_field("nf_input_snmp", "snmp_input_interface_index");
	rename_field("nf_l4_dst_port", "dst_port");
	rename_field("nf_ipv4_dst_addr", "dst_ip_addr");
	rename_field("nf_dst_mask", "dst_ip_netmask");
	rename_field("nf_output_snmp", "snmp_output_interface_index");
	rename_field("nf_ipv4_next_hop", "router_ip_addr_next_hop");
	rename_field("nf_src_as", "src_as");
	rename_field("nf_dst_as", "dst_as");
	rename_field("nf_bgp_ipv4_next_hop", "router_ip_addr_bgp_next_hop");
	rename_field("nf_mul_dst_pkts", "multicast_packets");
	rename_field("nf_mul_dst_bytes", "multicast_bytes");
	rename_field("nf_last_switched", "end_time");
	rename_field("nf_first_switched", "start_time");
	rename_field("nf_out_bytes", "src_bytes");
	rename_field("nf_out_pkts", "src_packets");
	rename_field("nf_min_pkt_length", "packet_length_min");
	rename_field("nf_max_pkt_length", "packet_length_max");
	rename_field("nf_ipv6_src_addr", "src_ipv6_addr");
	rename_field("nf_ipv6_dst_addr", "dst_ipv6_addr");
	rename_field("nf_ipv6_src_mask", "src_ipv6_netmask");
	rename_field("nf_ipv6_dst_mask", "dst_ipv6_netmask");
	rename_field("nf_ipv6_flow_label", "ipv6_flow_label");
	rename_field("nf_icmp_type", "icmp_type");
	rename_field("nf_mul_igmp_type", "mul_igmp_type");
	rename_field("nf_sampling_interval", "sampling_interval");
	rename_field("nf_sampling_algorithm", "sampling_algorithm");
	rename_field("nf_flow_active_timeout", "flow_active_timeout");
	rename_field("nf_flow_inactive_timeout", "flow_inactive_timeout");
	rename_field("nf_engine_type", "engine_type");
	rename_field("nf_engine_id", "engine_id");
	rename_field("nf_total_bytes_exp", "total_bytes_exp");
	rename_field("nf_total_pkts_exp", "total_pkts_exp");
	rename_field("nf_total_flows_exp", "total_flows_exp");
	rename_field("nf_ipv4_src_prefix", "ipv4_src_prefix");
	rename_field("nf_ipv4_dst_prefix", "ipv4_dst_prefix");
	rename_field("nf_mpls_top_label_type", "mpls_top_label_type");
	rename_field("nf_mpls_top_label_ip_addr", "mpls_top_label_ip_addr");
	rename_field("nf_flow_sampler_id", "flow_sampler_id");
	rename_field("nf_flow_sampler_mode", "flow_sampler_mode");
	rename_field("nf_flow_sampler_random_interval", "flow_sampler_random_interval");
	rename_field("nf_min_ttl", "min_ttl");
	rename_field("nf_max_ttl", "max_ttl");
	rename_field("nf_ipv4_ident", "ipv4_ident");
	rename_field("nf_dst_tos", "dst_tos");
	rename_field("nf_in_src_mac", "src_mac_addr_incoming");
	rename_field("nf_out_dst_mac", "dst_mac_addr_outgoing");
	rename_field("nf_in_dst_mac", "dst_mac_addr_incoming");
	rename_field("nf_out_src_mac", "src_mac_addr_outgoing");
	rename_field("nf_src_vlan", "src_vlan");
	rename_field("nf_dst_vlan", "dst_vlan");
	rename_field("nf_ip_protocol_version", "protocol_version");
	rename_field("nf_direction", "direction");
	rename_field("nf_ipv6_next_hop", "router_ipv6_addr_next_hop");
	rename_field("nf_bgp_ipv6_next_hop", "router_ipv6_addr_bgp_next_hop");
	rename_field("nf_ipv6_option_headers", "ipv6_option_headers");
	rename_field("nf_if_name", "interface_name");
	rename_field("nf_if_desc", "interface_description");
	rename_field("nf_sampler_name", "sampler_name");
	rename_field("nf_in_permanent_bytes", "in_permanent_bytes");
	rename_field("nf_in_permanent_pkts", "in_permanent_pkts");
	rename_field("nf_forwarding_status", "forwarding_status");
	rename_field("nf_application_description", "application_description");
	rename_field("nf_application_name", "application_name");
	rename_field("nf_postIpDiffServCodePoint", "postIpDiffServCodePoint");
end
