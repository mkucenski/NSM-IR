title: Conn Log
description: https://docs.zeek.org/en/stable/scripts/base/protocols/conn/main.zeek.html#base-protocols-conn-main-zeek
platform: zeek
log_source: network-protocols

event_source: zeek
event_type: conn
event_version: '0'

event_fields:
- standard_name: vlan_outer_id
  standard_type:
  name: vlan
  type: integer
  description: present if policy/protocols/conn/vlan-logging.bro is loaded The outer
    VLAN for this connection, if applicable.
  sample_value: '201'

- standard_name: vlan_inner_id
  standard_type:
  name: inner_vlan
  type: integer
  description: present if policy/protocols/conn/vlan-logging.bro is loaded The inner
    VLAN for this connection, if applicable.
  sample_value: '200'

- standard_name: connection_tunnel_uid
  standard_type:
  name: tunnel_parents
  type: string
  description: If this connection was over a tunnel, indicate the uid values for any
    encapsulating parent connections used over the lifetime of this inner connection
  sample_value: '[]'

- standard_name: src_bytes
  standard_type:
  name: orig_bytes
  type: integer
  description: The number of payload bytes the originator sent. For TCP this is taken
    from sequence numbers and might be inaccurate (e.g., due to large connections)
  sample_value: '113'

- standard_name: src_ip_bytes
  standard_type:
  name: orig_ip_bytes
  type: integer
  description: Number of IP level bytes that the originator sent (as seen on the wire,
    taken from the IP total_length header field)
  sample_value: '277'

- standard_name: src_mac_addr
  standard_type:
  name: orig_l2_addr
  type: string
  description: present if policy/protocols/conn/mac-logging.bro is loaded Link-layer
    address of the originator, if available.
  sample_value: 00:0c:29:c1:2d:24

- standard_name: src_packets
  standard_type:
  name: orig_pkts
  type: integer
  description: Number of packets that the originator sent
  sample_value: '3'

- standard_name: connection_flags_local_origin
  standard_type:
  name: file_flags_from_local_network
  type: boolean
  description: If the connection is originated locally, this value will be T. If it
    was originated remotely it will be F. In the case that the Site::local_nets variable
    is undefined, this field will be left empty at all times
  sample_value: 'true'

- standard_name: connection_flags_local_response
  standard_type:
  name: local_resp
  type: boolean
  description: If the connection is responded to locally, this value will be T. If
    it was responded to remotely it will be F. In the case that the Site::local_nets
    variable is undefined, this field will be left empty at all times
  sample_value: 'true'

- standard_name: duration
  standard_type:
  name: duration
  type: float
  description: How long the connection lasted. For 3-way or 4-way connection tear-downs,
    this will not include the final ACK
  sample_value: '0.120338'

- standard_name: network_connection_history
  standard_type:
  name: history
  type: string
  description: "Records the state history of connections as a string of letters. If\
    \ the event comes from the originator, the letter is in upper-case; if it comes\
    \ from the responder, it's in lower-case. The \u2018a', \u2018d', \u2018i' and\
    \ \u2018q' flags are recorded a maximum of one time in either direction regardless\
    \ of how many are actually seen. \u2018f', \u2018h', \u2018r' and \u2018s' can\
    \ be recorded multiple times for either direction if the associated sequence number\
    \ differs from the last-seen packet of the same flag type. \u2018c', \u2018t'\
    \ and \u2018w' are recorded in a logarithmic fashion: the second instance represents\
    \ that the event was seen (at least) 10 times; the third instance, 100 times;\
    \ etc. The meaning of those letters are: # \"Letter\": \"Meaning\", \"s\": \"\
    a SYN w/o the ACK bit set\", \"h\": \"a SYN+ACK (\"handshake\")\", \"a\": \"a\
    \ pure ACK\", \"d\": \"packet with payload (\"data\")\", \"f\": \"packet with\
    \ FIN bit set\", \"r\": \"packet with RST bit set\", \"c\": \"packet with a bad\
    \ checksum (applies to UDP too)\", \"t\": \"packet with retransmitted payload\"\
    , \"w\": \"packet with a zero window advertisement\", \"i\": \"inconsistent packet\
    \ (e.g. FIN+RST bits set)\", \"q\": \"multi-flag packet (SYN+FIN or SYN+RST bits\
    \ set)\", \"^\": \"connection direction was flipped by Bro's heuristic\""
  sample_value: ShADad

- standard_name: connection_state
  standard_type:
  name: conn_state
  type: string
  description: '"conn_state": "Meaning" "S0": "Connection attempt seen, no reply.",
    "S1": "Connection established, not terminated.", "SF": "Normal establishment and
    termination. Note that this is the same symbol as for state S1. You can tell the
    two apart because for S1 there will not be any byte counts in the summary, while
    for SF there will be.", "REJ": "Connection attempt rejected.", "S2": "Connection
    established and close attempt by originator seen (but no reply from responder).",
    "S3": "Connection established and close attempt by responder seen (but no reply
    from originator).", "RSTO": "Connection established, originator aborted (sent
    a RST).", "RSTR": "Responder sent a RST.", "RSTOS0": "Originator sent a SYN followed
    by a RST, we never saw a SYN-ACK from the responder.", "RSTRH": "Responder sent
    a SYN ACK followed by a RST, we never saw a SYN from the (purported) originator.",
    "SH": "Originator sent a SYN followed by a FIN, we never saw a SYN ACK from the
    responder (hence the connection was "half" open).", "SHR": "Responder sent a SYN
    ACK followed by a FIN, we never saw a SYN from the originator.", "OTH": "No SYN
    seen, just midstream traffic (a "partial connection" that was not later closed)."'
  sample_value: S1

- standard_name: network_missed_bytes
  standard_type:
  name: missed_bytes
  type: integer
  description: Indicates the number of bytes missed in content gaps, which is representative
    of packet loss. A value other than zero will normally cause protocol analysis
    to fail but some analysis may have been completed prior to the packet loss
  sample_value: '0'

- standard_name: application_protocol
  standard_type:
  name: service
  type: string
  description: An identification of an application protocol being sent over the connection
  sample_value: http

- standard_name: client_bytes_sent
  standard_type:
  name: resp_bytes
  type: integer
  description: The number of payload bytes the responder sent. See orig_bytes
  sample_value: '4344'

- standard_name: client_bytes_sent
  standard_type:
  name: resp_ip_bytes
  type: integer
  description: Number of IP level bytes that the responder sent (as seen on the wire,
    taken from the IP total_length header field)
  sample_value: '4508'

- standard_name: dst_mac_addr
  standard_type:
  name: resp_l2_addr
  type: string
  description: present if policy/protocols/conn/mac-logging.bro is loaded Link-layer
    address of the responder, if available.
  sample_value: 00:09:0f:db:f4:3e

- standard_name: client_packets_sent
  standard_type:
  name: resp_pkts
  type: integer
  description: Number of packets that the responder sent
  sample_value: '3'

references:

- text: Zeek Source
  link: https://docs.zeek.org/en/stable/scripts/base/protocols/conn/main.zeek.html#base-protocols-conn-main-zeek
tags: []
